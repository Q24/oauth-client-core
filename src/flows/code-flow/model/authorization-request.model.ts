/**
 * The client constructs the request URI by adding the following parameters to
 * the query component of the authorization endpoint URI using the
 * "application/x-www-form-urlencoded" format,
 */
export interface OAuthCodeFlowAuthorizeParameters {
  /**
   * The client identifier
   *
   * The authorization server issues the registered client a client
   * identifier -- a unique string representing the registration
   * information provided by the client.  The client identifier is not a
   * secret; it is exposed to the resource owner and MUST NOT be used
   * alone for client authentication.  The client identifier is unique to
   * the authorization server.
   *
   * The client identifier string size is left undefined by this
   * specification.  The client should avoid making assumptions about the
   * identifier size.  The authorization server SHOULD document the size
   * of any identifier it issues.
   */
  client_id: string;

  /**
   * Defines the flow type: authorization code flow
   */
  response_type: "code";

  /**
   * Useful to keep track of the session in the client or to prevent unsolicited flows.
   */
  state: string;

  /**
   *  The authorization and token endpoints allow the client to specify the
   * scope of the access request using the "scope" request parameter.  In turn,
   * the authorization server uses the "scope" response parameter to inform the
   * client of the scope of the access token issued.
   *
   * The value of the scope parameter is expressed as a list of space-
   * delimited, case-sensitive strings.  The strings are defined by the
   * authorization server. If the value contains multiple space-delimited
   * strings, their order does not matter, and each string adds an additional
   * access range to the requested scope.
   *
   *   scope       = scope-token *( SP scope-token ) scope-token = 1*( %x21 /
   *   %x23-5B / %x5D-7E )
   *
   * The authorization server MAY fully or partially ignore the scope requested
   * by the client, based on the authorization server policy or the resource
   * owner's instructions.  If the issued access token scope is different from
   * the one requested by the client, the authorization server MUST include the
   * "scope" response parameter to inform the client of the actual scope
   * granted.
   *
   * If the client omits the scope parameter when requesting authorization, the
   * authorization server MUST either process the request using a pre-defined
   * default value or fail the request indicating an invalid scope.  The
   * authorization server SHOULD document its scope requirements and default
   * value (if defined).
   *
   */
  scope?: string;
  /**
   * The redirect_uri the client wants (4) to redirect to.
   *
   * Mandatory if multiple redirect URIs are configured on the client.
   */
  redirect_uri?: string;

  /**
   * A challenge generated by the client.
   */
  code_challenge: string;

  /**
   * Needs to be sent if S256 is used as code_challenge method
   */
  code_challenge_method?: "S256" | "plain";

  /**
   * Value used to associate a Client session with an ID Token, and to mitigate
   * replay attacks. The value is passed through unmodified from the
   * Authentication Request to the ID Token. Sufficient entropy MUST be present
   * in the nonce values used to prevent attackers from guessing values. One
   * method to achieve this is to store a cryptographically random value as an
   * HttpOnly a session cookie and use a cryptographic hash of the value as the
   * nonce parameter. In that case, the nonce in the returned ID Token is
   * compared to the hash of the session cookie to detect ID Token replay by
   * third parties. Use of the nonce is OPTIONAL when using the code flow.
   */
  nonce?: string;
}
